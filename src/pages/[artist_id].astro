---
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import Separator from "../components/Separator.astro";
export const getStaticPaths = async () => {
  const artists = await getCollection("artists");
  return artists.map((artist) => ({
    params: { artist_id: artist.id },
    props: { artists, artist },
  }));
};

type Props = {
  artists: CollectionEntry<"artists">[];
  artist: CollectionEntry<"artists">;
};

const { artists, artist } = Astro.props;

const artist_id = artist.id;
const { Content } = await render(artist);
---

<BaseLayout title={artist.data.stage_name}>
  <section id="artist-page" data-artist-id={artist_id}>
    <header class="title-header">
      <h2 id="film-title" data-film-title>{artist.data.stage_name}</h2>
      <h4 class="faded">por {artist.data.name}</h4>
    </header>

    <Separator />

    <div class="content-wrap">
      <img
        id="main-image"
        class="image fade-in"
        src={artist.data.image.src}
      />
      
      
      
      <div class="content">
        <!-- ===== Formulario ===== -->
        <form id="feedback-form" class="stack" autocomplete="on" novalidate>
          <fieldset class="stack">
            <legend class="sr-only">Formulario</legend>

            <div class="row">
              <label for="f-name">Nombre</label>
              <input id="f-name" name="name" type="text"/>
            </div>

            <div class="row">
              <label for="f-phone">Tel√©fono *</label>
              <input id="f-phone" name="phone" type="tel" inputmode="tel" />
            </div>

            <div class="row">
              <label for="f-email">Email *</label>
              <input id="f-email" name="email" type="email" required />
            </div>

            <div class="row">
              <label for="f-comment">Comentario</label>
              <textarea id="f-comment" name="comment" rows="6" placeholder="Escribe tu mensaje‚Ä¶"></textarea>
            </div>

            <div class="row">
              <label>Audio</label>
              <div class="audio-controls">
                <button type="button" id="record-btn" class="record-btn" title="Grabar / Detener">üî¥ Grabar</button>
                <audio id="audio-preview" controls style="display:none; max-width: 100%;"></audio>
              </div>
            </div>

            <div class="form-actions">
              <button id="send-btn" class="send-btn" type="submit" title="Enviar formulario">Enviar</button>
            </div>
          </fieldset>
        </form>

        <div id="status" class="status" aria-live="polite"></div>
      </div>
    </div>
  </section>

  <style>
    /* Layout simple y balanceado (sin copiar el estilo de la maqueta) */
    .stack { display: grid; gap: 0.9rem; border:none }
    .row { display: grid; gap: 0.35rem; }
    .audio-controls { display: flex; align-items: center; gap: 0.75rem; flex-wrap: wrap; }
    .form-actions { margin-top: 0.25rem; }

    input, textarea {
      width: 100%;
      border: 1px solid var(--border, rgba(0,0,0,.15));
      padding: .6rem .7rem;
      border-radius: 10px;
      background: var(--surface, #fff);
    }

    .record-btn, .send-btn {
      border: 0; outline: 0;
      padding: .7rem 1rem;
      border-radius: 12px;
      font-weight: 700;
      cursor: pointer;
      transition: transform .08s ease, box-shadow .2s ease, opacity .2s ease;
      box-shadow: 0 3px 18px rgba(0,0,0,.12);
    }
    .record-btn { background: #ffe7e7; }
    .record-btn.recording { background: #ffd1d1; }
    .send-btn { background: #e7f5ff; }
    .send-btn:disabled { opacity: .6; cursor: not-allowed; }

    .status { margin-top: .5rem; min-height: 1.25rem; opacity: .85; font-size: .95rem; }

    .content-wrap {
      grid-template-areas: "img img" "content content";
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }
    @media (max-width: 900px) {
      .content-wrap {
        grid-template-areas: "img" "content";
        grid-template-columns: 100%;
      }
    }
  </style>

  <!-- Client-only script: Firebase + Audio + Env√≠o -->
  <script type="module">
    // ---- Firebase ----
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js';
    import { getFirestore, collection, addDoc, serverTimestamp } from 'https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore.js';
    import { getStorage, ref, uploadBytesResumable, getDownloadURL } from 'https://www.gstatic.com/firebasejs/9.0.0/firebase-storage.js';

    const firebaseConfig = {
      apiKey: "AIzaSyCNIC9rjV2AVhDTtlYfNa7Jq5LUU6114Jc",
      authDomain: "mafi-form.firebaseapp.com",
      projectId: "mafi-form",
      storageBucket: "mafi-form.firebasestorage.app",
      messagingSenderId: "599627382329",
      appId: "1:599627382329:web:7f2341eb374f986a4b97e8"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app);

    // ---- Utilidades ----
    const statusEl  = document.getElementById('status');
    const formEl    = document.getElementById('feedback-form');
    const sendBtn   = document.getElementById('send-btn');
    const nameEl    = document.getElementById('f-name');
    const phoneEl   = document.getElementById('f-phone');
    const emailEl   = document.getElementById('f-email');
    const commentEl = document.getElementById('f-comment');

    const artistSection = document.getElementById('artist-page');
    const artistId  = artistSection?.dataset.artistId || 'unknown-artist';
    const filmTitle = document.getElementById('film-title')?.textContent?.trim() || 'Unknown';
    const imgEl     = document.getElementById('main-image');
    const imgAlt    = imgEl?.getAttribute('alt') || filmTitle || artistId;

    function logStatus(msg) { if (statusEl) statusEl.textContent = msg || ''; }
    function slugify(s) { return (s || '').toLowerCase().replace(/[^a-z0-9_-]+/gi,'_').replace(/^_+|_+$/g,''); }

    // ---- Audio (no se sube al detener; solo al enviar) ----
    let mediaRecorder = null;
    let audioChunks = [];
    let activeStream = null;
    let pendingAudioBlob = null;

    const recordBtn    = document.getElementById('record-btn');
    const audioPreview = document.getElementById('audio-preview');

    recordBtn?.addEventListener('click', () => {
      if (recordBtn.classList.contains('recording')) stopRecording();
      else startRecording();
    });

    async function startRecording() {
      try {
        if (mediaRecorder && mediaRecorder.state === 'recording') return;

        activeStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(activeStream, { mimeType: 'audio/webm' });
        audioChunks = [];
        pendingAudioBlob = null;

        mediaRecorder.ondataavailable = (evt) => { if (evt.data?.size) audioChunks.push(evt.data); };
        mediaRecorder.onstop = () => {
          const blob = new Blob(audioChunks, { type: 'audio/webm' });
          pendingAudioBlob = blob;
          const localUrl = URL.createObjectURL(blob);
          audioPreview.src = localUrl;
          audioPreview.style.display = 'block';
          logStatus('üéß Audio listo. Revisa/edita el formulario y presiona ‚ÄúEnviar‚Äù.');
          cleanupStream();
          recordBtn.textContent = 'üî¥ Regrabar';
          recordBtn.classList.remove('recording');
        };

        mediaRecorder.start();
        recordBtn.textContent = '‚èπÔ∏è Detener';
        recordBtn.classList.add('recording');
        logStatus('üî¥ Grabando‚Ä¶');
      } catch (err) {
        console.error('Error starting recording:', err);
        logStatus('‚ö†Ô∏è No se pudo iniciar la grabaci√≥n. Revisa permisos del micr√≥fono.');
      }
    }

    function stopRecording() {
      if (mediaRecorder && mediaRecorder.state === 'recording') {
        mediaRecorder.stop();
      }
    }

    function cleanupStream() {
      if (activeStream) {
        activeStream.getTracks().forEach(t => t.stop());
        activeStream = null;
      }
      mediaRecorder = null;
      audioChunks = [];
    }

    async function uploadAudio(audioBlob, whoForName, whoForEmail) {
      const ts = Date.now();
      const who  = slugify(whoForName) || slugify(whoForEmail) || 'anon';
      const safeArtist = slugify(artistId || 'artist');
      const filename = `${who}_${ts}.webm`;
      const path = `audio/${safeArtist}/${filename}`;

      const storageRef = ref(storage, path);
      const task = uploadBytesResumable(storageRef, audioBlob);

      return new Promise((resolve, reject) => {
        task.on('state_changed',
          (snap) => {
            const pct = ((snap.bytesTransferred / snap.totalBytes) * 100) || 0;
            logStatus(`‚¨ÜÔ∏è Subiendo audio‚Ä¶ ${pct.toFixed(0)}%`);
          },
          (err) => reject(err),
          async () => {
            const url = await getDownloadURL(task.snapshot.ref);
            logStatus('‚úÖ Audio subido.');
            resolve({ url, path, filename });
          }
        );
      });
    }

    // ---- Env√≠o del formulario (reemplaza "Votar") ----
    formEl?.addEventListener('submit', async (e) => {
      e.preventDefault();
      try {
        // Validaciones m√≠nimas
        const name  = nameEl?.value.trim();
        const phone = phoneEl?.value.trim();
        const email = emailEl?.value.trim();
        if (!name || !phone || !email || (emailEl && !emailEl.checkValidity())) {
          logStatus('‚ö†Ô∏è Completa Nombre, Tel√©fono y un Email v√°lido.');
          return;
        }

        sendBtn.disabled = true;
        logStatus('‚è≥ Enviando‚Ä¶');

        // Subir audio solo ahora
        let audioUrl = null, audioPath = null, audioFilename = null;
        if (pendingAudioBlob) {
          const uploaded = await uploadAudio(pendingAudioBlob, name, email);
          audioUrl = uploaded.url;
          audioPath = uploaded.path;
          audioFilename = uploaded.filename;
        }

        // Guardar en la MISMA DB (colecci√≥n "votes") con toda la info
        await addDoc(collection(db, 'votes'), {
          type: 'submission',           // para distinguir de votos antiguos
          isVote: true,                 // mantiene compatibilidad con cualquier conteo
          film: filmTitle,
          artistId,
          imageAlt: imgAlt,
          name, phone, email,
          comment: commentEl?.value.trim() || '',
          audioUrl: audioUrl || null,
          audioPath: audioPath || null,
          audioFilename: audioFilename || null,
          submittedAt: serverTimestamp()
        });

        // Reset
        formEl.reset();
        if (audioPreview) {
          audioPreview.removeAttribute('src');
          audioPreview.style.display = 'none';
        }
        pendingAudioBlob = null;
        recordBtn.textContent = 'üî¥ Grabar';
        logStatus('‚úÖ ¬°Gracias! Tu respuesta fue enviada.');
      } catch (err) {
        console.error('Submit error:', err);
        logStatus('‚ö†Ô∏è Ocurri√≥ un error al enviar. Intenta nuevamente.');
      } finally {
        sendBtn.disabled = false;
      }
    });
  </script>
</BaseLayout>

<style>
    .content-wrap {
    grid-template-areas: "img" "content" "albums";
    grid-template-columns: 100%;
    @media screen and (min-width: 44em) {
      grid-template-columns: 1fr auto;
      grid-template-areas: "img img" "content albums";
    }
    @media screen and (min-width: 50em) {
      grid-template-columns: 30vw 1fr 170px;
      grid-template-areas: "img content albums";
    }
  }
  .albums {
    grid-area: albums;
  }
  .content p:last-child {
    margin-top: 2.5rem;
    display: flex;
  }
</style>